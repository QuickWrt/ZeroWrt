name: Build releases

on:
  workflow_dispatch:
    inputs:
      device:
        description: 'Select the build device'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - 'rockchip'
          - 'x86_64'
      compile_options:
        description: 'Build options (separate multiple options with spaces)'
        required: true
        default: 'release'
        type: choice
        options:
          - 'accelerated'
          - 'normal'
          - 'toolchain-only' 

jobs:
  build:
    name: Build ${{ github.event.inputs.device }}
    runs-on: self-hosted
#    env:
#      TERM: xterm-256color
#      LC_ALL: C.UTF-8
#      LANG: zh_CN.UTF-8
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      continue-on-error: true
      uses: actions/checkout@main

    - name: Setup variables
      run: |
        git config --global user.name 'actions'
        git config --global user.email 'action@github.com'
        
    - name: Show system
      run: |
        echo -e "\n\e[1;32mCPU:\e[0m"
        echo "$(grep 'model name' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}') ($(grep 'cpu MHz' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}')MHz) x $(grep processor /proc/cpuinfo  | wc -l)"
        echo -e "\n\e[1;32mMemory:\e[0m"
        free -h
        echo -e "\n\e[1;32mStorage:\e[0m"
        df -Th / /mnt
        echo -e "\n\e[1;32mSystem:\e[0m"
        lsb_release -a
        echo -e "\n\e[1;32mKernel:\e[0m"
        uname -a
        echo

#    - name: Free disk space
#      uses: sbwml/actions@free-disk
#      with:
#        build-mount-path: /builder

#    - name: Build System Setup
#      uses: sbwml/actions@openwrt-build-setup

#    - name: Install LLVM
#      uses: sbwml/actions@install-llvm
      
    - name: Compile OpenWrt
      id: compile
      run: |
        bash <(curl -sS ${{ secrets.script_url_general }}) v24 ${{ github.event.inputs.device }} ${{ github.event.inputs.compile_options }}
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        tags=$(git describe --abbrev=0 --tags)
        echo "latest_release=$tags" >>$GITHUB_ENV

    - name: Extensive logs after a failed compilation
      if: steps.compile.outcome == 'failure'
      run: |
        cd openwrt
        make V=s IGNORE_ERRORS="n m"

    - name: Create toolchain cache release
      if: github.event.inputs.compile_options == 'toolchain-only'
      uses: ncipollo/release-action@v1.14.0
      with:
        name: Toolchain-Cache
        allowUpdates: true
        prerelease: true
        tag: Toolchain-Cache
        commit: master
        replacesArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: |
          openwrt/toolchain-cache/*
          
    - name: Prepare Firmware Files
      if: github.event.inputs.compile_options != 'toolchain-only'
      run: |
        mkdir -p rom info
        if [ "${{ github.event.inputs.device }}" = "rockchip" ]; then
          cp -a openwrt/bin/targets/rockchip/*/*.img.gz rom/
          cp -a openwrt/bin/targets/rockchip/*/*.manifest info/manifest.txt
          cp -a openwrt/bin/targets/rockchip/*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum * > ../info/sha256sums.txt
        elif [ "${{ github.event.inputs.device }}" = "x86_64" ]; then
          cp -a openwrt/bin/targets/x86/*/*-ext4-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/x86/*/*-squashfs-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/x86/*/*-generic-rootfs.tar.gz rom/
          cp -a openwrt/bin/targets/x86/*/*-x86-64-generic.manifest info/manifest.txt
          cp -a openwrt/bin/targets/x86/*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum * > ../info/sha256sums.txt
        fi
        cd ..
        tar zcf rom/buildinfo_${{ github.event.inputs.device }}.tar.gz info

    - name: Prepare Kernel Files
      if: github.event.inputs.compile_options != 'toolchain-only'
      run: |
        base_name=$(basename openwrt/*-*.tar.gz)
        kmod_name=$(echo $base_name | sed 's/~/-/g')
        mv openwrt/*-*.tar.gz openwrt/$kmod_name

    - name: Release kernel modules
      if: github.event.inputs.compile_options != 'toolchain-only'
      uses: ncipollo/release-action@v1.14.0
      with:
        name: kmod-snapshot
        allowUpdates: true
        prerelease: true
        tag: snapshot
        commit: master
        replacesArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: |
          openwrt/*-*.tar.gz
        
    - name: Upload artifacts
      if: github.event.inputs.compile_options != 'toolchain-only'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.inputs.device }}-openwrt-${{ env.latest_release }}
        path: openwrt/rom/*
        
    - name: Create release
      if: github.event.inputs.compile_options != 'toolchain-only'
      uses: ncipollo/release-action@v1.14.0
      with:
        name: OpenWrt-${{ env.latest_release }}
        allowUpdates: true
        tag: ${{ env.latest_release }}
        commit: master
        replacesArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: |
          openwrt/rom/*

    - name: Release OTA
      if: github.event.inputs.compile_options != 'toolchain-only'
      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      with:
        server: ${{ secrets.ftp_address }}
        username: ftpopenwrt
        password: ${{ secrets.ftp_password }}
        server-dir: ota/
        local-dir: ota/
        dangerous-clean-slate: true

    - name: Sync kernel modules
      if: github.event.inputs.compile_options != 'toolchain-only'
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.workflow_token }}
        repository: QuickWrt/openwrt-core
        event-type: sync
